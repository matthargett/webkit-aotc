This test runs the WebGL Test listed below in an iframe and reports PASS or FAIL.

Test: ../../resources/webgl_test_files/conformance2/renderbuffers/framebuffer-test.html
[ 1: PASS ] gl = wtu.create3DContext(canvas, undefined, 2) is non-null.
[ 2: PASS ] getError was expected value: INVALID_ENUM : getFramebufferAttachmentParameter(COLOR_ATTACHMENT0) on the default framebuffer.
[ 3: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(BACK) on the default framebuffer.
[ 4: PASS ] getError was expected value: NO_ERROR : checkFramebufferStatus on the default framebuffer.
[ 5: PASS ] getError was expected value: INVALID_OPERATION : attach a texture to default framebuffer.
[ 6: PASS ] getError was expected value: INVALID_OPERATION : detach default renderbuffer from default framebuffer.
[ 7: PASS ] getError was expected value: NO_ERROR : allocate renderbuffer storage of a newly created renderbuffer.
[ 8: PASS ] getError was expected value: INVALID_OPERATION : attach a renderbuffer to the default framebuffer.
[ 9: PASS ] getError was expected value: NO_ERROR : bind a newly created framebuffer.
[ 10: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(READ_FRAMEBUFFER).
[ 11: PASS ] checkFramebufferStatus(READ_FRAMEBUFFER) should succeed.
[ 12: PASS ] getError was expected value: NO_ERROR : checkFramebufferStatus(READ_FRAMEBUFFER).
[ 13: PASS ] getError was expected value: NO_ERROR : bindFramebuffer(READ_FRAMEBUFFER).
[ 14: PASS ] bindFramebuffer(READ_FRAMEBUFFER) should change READ_FRAMEBUFFER_BINDING.
[ 15: PASS ] bindFramebuffer(READ_FRAMEBUFFER) should not change DRAW_FRAMEBUFFER_BINDING.
[ 16: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE) with no attachment.
[ 17: PASS ] getError was expected value: NO_ERROR : framebufferTexImage2D(READ_FRAMEBUFFER).
[ 18: PASS ] getError was expected value: NO_ERROR : framebufferRenderbuffer(READ_FRAMEBUFFER).
[ 19: PASS ] getError was expected value: NO_ERROR : framebufferTexImage2D(COLOR_ATTACHMENT1).
[ 20: PASS ] getError was expected value: NO_ERROR : framebufferRenderbuffer(COLOR_ATTACHMENT1).
[ 21: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) with no attachment.
[ 22: PASS ] getError was expected value: NO_ERROR : attach a texture to a framebuffer.
[ 23: PASS ] getError was expected value: NO_ERROR : detach a texture from a framebuffer.
[ 24: PASS ] getError was expected value: NO_ERROR : framebufferTexture2D with an appropriate mipmap level.
[ 25: PASS ] getError was expected value: INVALID_VALUE : framebufferTexture2D with a mipmap level out of range.
[ 26: PASS ] getError was expected value: NO_ERROR : attach a renderbuffer to a framebuffer.
[ 27: PASS ] getError was expected value: NO_ERROR : detach a renderbuffer from a framebuffer.
[ 28: PASS ] getError was expected value: NO_ERROR : bind default (null) framebuffer.
[ 29: PASS ] getError was expected value: NO_ERROR : attach a texture to read/draw framebuffer binding point.
[ 30: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer.
[ 31: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer with no attachment.
[ 32: PASS ] getError was expected value: NO_ERROR : detach a texture from read/draw framebuffer.
[ 33: PASS ] getError was expected value: NO_ERROR : attach a texture to read/draw framebuffer binding point.
[ 34: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer.
[ 35: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer with no attachment.
[ 36: PASS ] getError was expected value: NO_ERROR : detach a texture from read/draw framebuffer.
[ 37: PASS ] gl.getFramebufferAttachmentParameter(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is non-zero.
[ 38: PASS ] gl.getFramebufferAttachmentParameter(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_BLUE_SIZE) is 0
[ 39: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read framebuffer with no attachment.
[ 40: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on draw framebuffer.
[ 41: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on draw framebuffer with no attachment.
[ 42: PASS ] getError was expected value: NO_ERROR : attaching a renderbuffer to a read/draw framebuffer.
[ 43: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer.
[ 44: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer with no attachment.
[ 45: PASS ] getError was expected value: NO_ERROR : detach a renderbuffer from a read/draw framebuffer.
[ 46: PASS ] getError was expected value: NO_ERROR : attaching a renderbuffer to a read/draw framebuffer.
[ 47: PASS ] getError was expected value: NO_ERROR : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer.
[ 48: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING) on read/draw framebuffer with no attachment.
[ 49: PASS ] getError was expected value: NO_ERROR : detach a renderbuffer from a read/draw framebuffer.
[ 50: PASS ] getError was expected value: NO_ERROR : allocating renderbuffer storage of a newly created renderbuffer.
[ 51: PASS ] gl.getFramebufferAttachmentParameter(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.FRAMEBUFFER_ATTACHMENT_RED_SIZE) is non-zero.
[ 52: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) on read framebuffer without depth attachment.
[ 53: PASS ] gl.getFramebufferAttachmentParameter(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) is non-zero.
[ 54: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_RED_SIZE) on draw framebuffer without color attachment.
[ 55: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_RED_SIZE) on read framebuffer with no attachment.
[ 56: PASS ] gl.getFramebufferAttachmentParameter(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) is non-zero.
[ 57: PASS ] getError was expected value: INVALID_OPERATION : getFramebufferAttachmentParameter(FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE) on draw framebuffer with no attachment.
[ 58: PASS ] getError was expected value: NO_ERROR : bind read framebuffer to default (null) framebuffer.
[ 59: PASS ] getError was expected value: NO_ERROR : bind draw framebuffer to default (null) framebuffer.
[ 60: PASS ] successfullyParsed is true
[ PASS ] All tests passed

